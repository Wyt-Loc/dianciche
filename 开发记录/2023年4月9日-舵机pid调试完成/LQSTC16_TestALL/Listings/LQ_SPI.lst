C251 COMPILER V5.60.0,  LQ_SPI                                                             09/04/23  11:30:28  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE LQ_SPI
OBJECT MODULE PLACED IN .\Objects\LQ_SPI.obj
COMPILER INVOKED BY: F:\MDK\C251\BIN\C251.EXE LQlib\driver\LQ_SPI.c LARGE INTR2 BROWSE INCDIR(.\user;.\LQlib\app;.\LQlib
                    -\driver) DEBUG PRINT(.\Listings\LQ_SPI.lst) TABS(2) OBJECT(.\Objects\LQ_SPI.obj) 

stmt  level    source

    1          
    2          #include "include.h"
    3          
    4          /*************  SPI设备相关变量声明   **************/
    5          sbit    LQ_IMU_SCK = P2^5;                 //SCK
    6          sbit    LQ_IMU_SO  = P2^4;                 //MISO
    7          sbit    LQ_IMU_SI  = P2^3;                 //MOSI
    8          sbit    LQ_IMU_CE  = P2^2;                 //CS
    9          
   10          #define SPI_CE_High()   LQ_IMU_CE  = 1     // set CE high
   11          #define SPI_CE_Low()    LQ_IMU_CE  = 0     // clear CE low
   12          #define SPI_Hold()      P_SPI_Hold = 0     // clear Hold pin
   13          #define SPI_UnHold()    P_SPI_Hold = 1     // set Hold pin
   14          #define SPI_WP()        P_SPI_WP   = 0     // clear WP pin
   15          #define SPI_UnWP()      P_SPI_WP   = 1     // set WP pin
   16          
   17          /************************************************************************/
   18          void SPI_init(void)
   19          {
   20   1          SPCTL |=  (1 << 7);                    //忽略 SS 引脚功能，使用 MSTR 确定器件是主机还是从机
   21   1          SPCTL |=  (1 << 6);                    //使能 SPI 功能
   22   1          SPCTL &= ~(1 << 5);                    //先发送/接收数据的高位（ MSB）
   23   1          SPCTL |=  (1 << 4);                    //设置主机模式
   24   1          SPCTL &= ~(1 << 3);                    //SCLK 空闲时为低电平，SCLK 的前时钟沿为上升沿，后时钟沿为下降
             -沿
   25   1          SPCTL &= ~(1 << 2);                    //数据 SS 管脚为低电平驱动第一位数据并在 SCLK 的后时钟沿改变数
             -据
   26   1          SPCTL = (SPCTL & ~3) | 0;              //SPI 时钟频率选择, 0: 4T, 1: 8T,  2: 16T,  3: 32T
   27   1          P_SW1 = (P_SW1 & ~(3<<2)) | (1<<2);    //IO口切换. 0: P1.2/P5.4 P1.3 P1.4 P1.5, 
   28   1                                                 //1: P2.2 P2.3 P2.4 P2.5, 
   29   1                                                 //2: P5.4 P4.0 P4.1 P4.3, 
   30   1                                                 //3: P3.5 P3.4 P3.3 P3.2
   31   1                                                 
   32   1          LQ_IMU_SCK = 0;                        // set clock to low initial state
   33   1          LQ_IMU_SI = 1;    
   34   1          SPSTAT = SPIF + WCOL;                  //清0 SPIF和WCOL标志
   35   1      }
   36          
   37          /************************************************************************/
   38          void SPI_WriteByte(u8 out)
   39          {  
   40   1          SPDAT = out;
   41   1          while((SPSTAT & SPIF) == 0) ;
   42   1          SPSTAT = SPIF + WCOL;                  //清0 SPIF和WCOL标志 
   43   1      }
   44          
   45          /************************************************************************/
   46          u8 SPI_ReadByte(void)
   47          {  
   48   1          SPDAT = 0xff;
   49   1          while((SPSTAT & SPIF) == 0) ;
   50   1          SPSTAT = SPIF + WCOL;                  //清0 SPIF和WCOL标志
   51   1          return (SPDAT);
   52   1      }
   53          
   54          /************************************************
   55          从Flash中读取数据
   56          入口参数:
C251 COMPILER V5.60.0,  LQ_SPI                                                             09/04/23  11:30:28  PAGE 2   

   57              addr   : 地址参数
   58              lqbuf : 缓冲从Flash中读取的数据
   59              lqsize   : 数据块大小
   60          出口参数:
   61              无
   62          ************************************************/
   63          void SPI_Read_Nbytes(u8 addr, u8 *lqbuf, u16 lqsize)
   64          {
   65   1          SPI_CE_Low();                         //enable device
   66   1          SPI_WriteByte(addr);                  //设置起始地址
   67   1          lqbuf++;                              
   68   1          do{                                   
   69   2              *lqbuf = SPI_ReadByte();          //receive byte and store at lqbuf
   70   2              lqbuf++;                          
   71   2          }while(--lqsize);                     //read until no_bytes is reached
   72   1          SPI_CE_High();                        //disable device
   73   1      }
   74          
   75          /************************************************
   76          写数据到Flash中
   77          入口参数:
   78              addr   : 地址参数
   79              lqbuf : 缓冲需要写入Flash的数据
   80              lqsizee   : 数据块大小
   81          出口参数: 无
   82          ************************************************/
   83          void SPI_Write_Nbytes(u8 addr, u8 *lqbuf, u8 lqsize)
   84          {
   85   1      
   86   1          SPI_CE_Low();                         // enable device
   87   1          SPI_WriteByte(addr);                  // 发送页编程命令
   88   1          lqbuf++;                              
   89   1          do{                                   
   90   2              SPI_WriteByte(*lqbuf++);          //连续页内写
   91   2              addr++;                           
   92   2              if ((addr & 0xff) == 0) break;    
   93   2          }while(--lqsize);                     
   94   1          SPI_CE_High();                        // disable device
   95   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       164     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------          4
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
